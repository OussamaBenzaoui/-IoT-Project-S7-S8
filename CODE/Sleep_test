//
///*   RadioLib SX126x Receive Example
//   This example listens for LoRa transmissions using SX126x Lora modules.
//   To successfully receive data, the following settings have to be the same
//   on both transmitter and receiver:
//    - carrier frequency
//    - bandwidth
//    - spreading factor
//    - coding rate
//    - sync word
//    - preamble length
//   Other modules from SX126x family can also be used.
//   For default module settings, see the wiki page
//   https://github.com/jgromes/RadioLib/wiki/Default-configuration#sx126x---lora-modem
//   For full API reference, see the GitHub Pages
//   https://jgromes.github.io/RadioLib/

// include the library
#include <RadioLib.h>

#define uS_TO_S_FACTOR 1000000  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  5       /* Time ESP32 will go to sleep (in seconds) */

String str;

int sleep_state, T;
// SX1262 has the following connections:
// NSS pin :  5
// DIO1 pin:  12
// NRST pin:  14
// BUSY pin:  2
SX1262 radio = new Module(5, 12, 14, 2);

// or using RadioShield
// https://github.com/jgromes/RadioShield
//SX1262 radio = RadioShield.ModuleA;


// or using CubeCell
//SX1262 radio = new Module(RADIOLIB_BUILTIN_MODULE);

void setup() {
  Serial.begin(115200);

  // initialize SX1262 with default settings
  Serial.print(F("[SX1262] Initializing ... "));
//  int state = radio.begin(868.0, 125.0, 9, 7, 0x12, 10, 8, 1.6, false);
//  radio.setDio2AsRfSwitch(true);
//  radio.explicitHeader();
//  radio.setCRC(2);
//  if (state == RADIOLIB_ERR_NONE) {
//    Serial.println(F("success!"));
//  } else {
//    Serial.print(F("failed, code "));
//    Serial.println(state);
//    while (true);
//  }
//
//  //delay(1000);
//  Serial.println("LORA ZZZZZ");
//  sleep_state = radio.sleep();
//  //delay(10000);
//
//  Serial.println("LORA ZZZZZ");
   //Serial.println("ESP_LIGHT ZZZZZ");
  //esp_light_sleep_start();
}

void loop()  {
  T = millis();
  while (T + 5000 > millis()) {
    radio.receive(str);
    Serial.print(F("[SX1262] Data:\t\t"));
    Serial.println(str);
  }
  delay(500);
  sleep_state = radio.sleep();
  //esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
  //esp_light_sleep_start();
}
